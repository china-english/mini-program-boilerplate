/**
 *
 * {{ properCase name }} Container
 * created by generator
 *
 */
{{#if wantWX}}

/* global wx */
{{/if}}

import Taro, { Component } from '@tarojs/taro'
import { View, Text } from '@tarojs/components'
import { connect } from '@tarojs/redux'
import PropTypes from 'prop-types'

import './index.scss'

@connect(
  (state) => (
    state
  ),
  (dispatch) => ({
    dispatch
  })
)

export class {{ properCase name }} extends Component {
  // constructor(props) {
  //   super(props)
  //   this.state = {}
  // }
  // /**
  //  * @desc 监听程序初始化，初始化完成时触发（全局只触发一次）
  //  * 此时页面 DOM 尚未准备好，还不能和视图层进行交互
  //  */
  // componentWillMount() {}
  // /**
  //  * @desc 监听程序初始化，初始化完成时触发（全局只触发一次）
  //  * 页面已经准备妥当，可以和视图层进行交互
  //  */
  // componentDidMount() {}
  {{#if wantHeader}}
  config = {
    // 当前页配置项会覆盖全局配置项相同的配置
    navigationBarTitleText: '{{ titleCase name }}'
  }
  {{/if}}
  // /**
  //  * @desc 页面显示/切入前台时触发
  //  */
  // componentDidShow() {}
  // /**
  //  * @desc 页面隐藏/切入后台时触发
  //  */
  // componentDidHide() {}
  // /**
  //  * @param {string} error 程序的报错信息
  //  * @desc 程序发生脚本错误或 API 调用报错时触发
  //  */
  // componentDidCatchError(error) {}
  // /**
  //  * @param {object} message 找不到的页面路径、参数及是否本次启动的首个页面
  //  * @desc 程序要打开的页面不存在时触发
  //  */
  // componentDidNotFound(message) {}
  // /**
  //  * @param {object} nextProps 下一状态的 props
  //  * @param {object} nextState 下一状态的 state
  //  * @desc 页面是否需要更新
  //  */
  // shouldComponentUpdate(nextProps, nextState) {}
  // /**
  //  * @param {object} nextProps 下一状态的 props
  //  * @param {object} nextState 下一状态的 state
  //  * @desc 页面即将更新
  //  */
  // componentWillUpdate(nextProps, nextState) {}
  // /**
  //  * @param {object} prevProps 上一状态的 props
  //  * @param {object} prevState 上一状态的 state
  //  * @desc 页面更新完毕
  //  */
  // componentDidUpdate(prevProps, prevState) {}
  // /**
  //  * @desc 页面卸载时触发
  //  */
  // componentWillUnmount() {}

  render() {
    const { generateText } = this.props
    {{#if wantWX}}
    console.log(wx)
    {{/if}}
    return (
      <View className='{{ kebabCase name }}-container'>
        <Text className='generate-text'>This page name is {{ sentenceCase name }}</Text>
        <Text className='generate-text'>{generateText}</Text>
      </View>
    )
  }
}

{{ properCase name }}.defaultProps = {
  generateText: 'This generate page'
}

/*
 * 父级 props
 * 自身 state
 * 自身 dispatch function
 */
{{ properCase name }}.propTypes = {
  generateText: PropTypes.string
}

export default {{ properCase name }}
